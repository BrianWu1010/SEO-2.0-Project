# -*- coding: utf-8 -*-
"""Brand-level Comparison between Traditional Search and LLM Web Search API.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uPnVasSrWQtwsL5K_GPtp4mWNTI-8gFx

# Comparison - Brand-level

## Helper Functions
"""

# Add 'Brand' variable
def extract_brand_from_title(title):
    """
    Calls OpenAI API to extract the real brand name from a product title.
    If no brand is confidently identified, returns 'Unknown'.
    """
    try:
        completion = openai.ChatCompletion.create(
            model="gpt-4o-mini",  # or use another model as needed
            messages=[
                {
                    "role": "system",
                    "content": (
                        "You are an expert at identifying real product brand names from product titles. "
                        "Only return the brand name if it is verifiably real. Do not invent or guess. "
                        "If you cannot determine a valid brand, return 'Unknown'."
                    )
                },
                {"role": "user", "content": title}
            ]
        )
        # Assuming the API returns the brand name in the plain text response.
        brand = completion.choices[0].message["content"].strip()
        return brand
    except Exception as e:
        print(f"Error processing title: {title}. Error: {e}")
        return "Unknown"

def clean_name(name):
    return str(name).lower().strip().replace("Â®", "").replace("â„¢", "").replace("-", "").replace("â€™", "'").replace("Ã©", "e")

# Replace brand names for consistency
def standardize_brand(df, brand_column="Brand"):
    """
    Standardizes brand names in the specified column of a DataFrame
    """
    df.loc[df[brand_column].str.contains("hill's", case=False, na=False), brand_column] = "hill's science diet"
    df.loc[df[brand_column].str.contains("wellness", case=False, na=False), brand_column] = "wellness"
    df.loc[df[brand_column].str.contains("purina", case=False, na=False), brand_column] = "purina"
    df.loc[df[brand_column].str.contains("fancy feast", case=False, na=False), brand_column] = "purina"
    df.loc[df[brand_column].str.contains("blue bottle", case=False, na=False), brand_column] = "blue bottle coffee"
    df.loc[df[brand_column].str.contains("canyon", case=False, na=False), brand_column] = "canyon coffee"
    df.loc[df[brand_column].str.contains("kloo", case=False, na=False), brand_column] = "kloo coffee"
    df.loc[df[brand_column].str.contains("king arthur", case=False, na=False), brand_column] = "king arthur baking company"
    return df

"""## Google Search versus Google Shopping versus LLM Websearch

### Preprocessing
"""

# googleshop0_df = pd.read_csv("GoogleShopping.csv")
# googlesearch0_df = pd.read_csv("GoogleSearch_Data_3_27.csv")

# # Add 'Brand' variable
# def extract_brand_from_title(title):
#     """
#     Calls OpenAI API to extract the real brand name from a product title.
#     If no brand is confidently identified, returns 'Unknown'.
#     """
#     try:
#         completion = openai.ChatCompletion.create(
#             model="gpt-4o-mini",  # or use another model as needed
#             messages=[
#                 {
#                     "role": "system",
#                     "content": (
#                         "You are an expert at identifying real product brand names from product titles. "
#                         "Only return the brand name if it is verifiably real. Do not invent or guess. "
#                         "If you cannot determine a valid brand, return 'Unknown'."
#                     )
#                 },
#                 {"role": "user", "content": title}
#             ]
#         )
#         # Assuming the API returns the brand name in the plain text response.
#         brand = completion.choices[0].message["content"].strip()
#         return brand
#     except Exception as e:
#         print(f"Error processing title: {title}. Error: {e}")
#         return "Unknown"

# Apply the extraction function to each Title.
# googleshop0_df["Brand"] = googleshop0_df["Title"].apply(extract_brand_from_title)
# googleshop0_df.to_csv("updated_googleshopping.csv", index=False)
# googlesearch0_df["Brand"] = googlesearch0_df["Product Title"].apply(extract_brand_from_title)
# googlesearch0_df.to_csv("updated_googlesearching.csv", index=False)

# Load data
googlesearch_df = pd.read_csv("updated_googlesearching.csv")
llm_df = pd.read_csv("LLM_Websearch_Data_3_27.csv")
googleshop_df = pd.read_csv("updated_googleshopping.csv")

def clean_name(name):
    return str(name).lower().strip().replace("Â®", "").replace("â„¢", "").replace("-", "").replace("â€™", "'").replace("Ã©", "e")

googlesearch_df["Brand"] = googlesearch_df["Brand"].map(clean_name)
llm_df["Brand"] = llm_df["Brand"].map(clean_name)
googleshop_df["Brand"] = googleshop_df["Brand"].map(clean_name)
llm_df["Title"] = llm_df["Title"].map(clean_name)

# Replace brand names for consistency
def standardize_brand(df, brand_column="Brand"):
    """
    Standardizes brand names in the specified column of a DataFrame
    """
    df.loc[df[brand_column].str.contains("hill's", case=False, na=False), brand_column] = "hill's science diet"
    df.loc[df[brand_column].str.contains("wellness", case=False, na=False), brand_column] = "wellness"
    df.loc[df[brand_column].str.contains("purina", case=False, na=False), brand_column] = "purina"
    df.loc[df[brand_column].str.contains("fancy feast", case=False, na=False), brand_column] = "purina"
    df.loc[df[brand_column].str.contains("blue bottle", case=False, na=False), brand_column] = "blue bottle coffee"
    df.loc[df[brand_column].str.contains("canyon", case=False, na=False), brand_column] = "canyon coffee"
    df.loc[df[brand_column].str.contains("kloo", case=False, na=False), brand_column] = "kloo coffee"
    df.loc[df[brand_column].str.contains("king arthur", case=False, na=False), brand_column] = "king arthur baking company"

    return df

googlesearch_df = standardize_brand(googlesearch_df, "Brand")
llm_df = standardize_brand(llm_df, "Brand")
googleshop_df = standardize_brand(googleshop_df, "Brand")

"""### Comparison"""

def compare_brands(category, googlesearch_df, llm_df, googleshop_df):
    # Filter Google Search data by category.
    google_cat = googlesearch_df[googlesearch_df["Category"].str.lower() == category.lower()]
    google_brand_counts = google_cat["Brand"].str.lower().value_counts().reset_index()
    google_brand_counts.columns = ["brand", "count"]
    # Replace "unknown" with an approach-specific marker.
    google_brands = [("unknown_google" if b == "unknown" else b) for b in google_brand_counts["brand"].tolist()]
    google_set = set(google_brands)

    # Filter LLM WebSearch data by category.
    llm_cat = llm_df[llm_df["Product Title"].str.lower().str.contains(category.lower())]
    llm_brands = llm_cat["Brand"].str.lower().str.strip().tolist()
    # Replace "unknown" with an approach-specific marker.
    llm_brands = [("unknown_llm" if b == "unknown" else b) for b in llm_brands]
    llm_set = set(llm_brands)

    # Filter Google Shopping data by category.
    shop_cat = googleshop_df[googleshop_df["Product title"].str.lower() == category.lower()]
    shop_brand_counts = shop_cat["Brand"].str.lower().value_counts().reset_index()
    shop_brand_counts.columns = ["brand", "count"]
    shop_brands = [("unknown_shop" if b == "unknown" else b) for b in shop_brand_counts["brand"].tolist()]
    shop_set = set(shop_brands)

    # Compute intersections and differences.
    # Since "unknown" values have been replaced by approach-specific markers,
    # they will not be considered common.
    common_all = google_set & llm_set & shop_set
    common_google_llm = (google_set & llm_set) - shop_set
    common_google_shop = (google_set & shop_set) - llm_set
    common_llm_shop = (llm_set & shop_set) - google_set

    only_google = google_set - (llm_set | shop_set)
    only_llm = llm_set - (google_set | shop_set)
    only_shop = shop_set - (google_set | llm_set)

    # Print results if non-empty.
    print(f"\nðŸ“¦ Category: {category.title()}")
    if common_all:
        print("âœ… Common brands (all three):", sorted(common_all))
    if common_google_llm:
        print("ðŸ”¹ Common in Google Search & LLM WebSearch:", sorted(common_google_llm))
    if common_google_shop:
        print("ðŸ”¹ Common in Google Search & Google Shopping:", sorted(common_google_shop))
    if common_llm_shop:
        print("ðŸ”¹ Common in LLM WebSearch & Google Shopping:", sorted(common_llm_shop))
    if only_google:
        print("ðŸ”¸ Only in Google Search:", sorted(only_google))
    if only_llm:
        print("ðŸ”¸ Only in LLM WebSearch:", sorted(only_llm))
    if only_shop:
        print("ðŸ”¸ Only in Google Shopping:", sorted(only_shop))

    # Visualization using venn3.
    venn3([google_set, llm_set, shop_set],
          set_labels=("Google Search", "LLM WebSearch", "Google Shopping"))
    plt.title(f"Brand Overlap for {category.title()}")
    plt.show()

# 3.25 data
compare_brands("dog food", googlesearch_df, llm_df, googleshop_df)
compare_brands("cat food", googlesearch_df, llm_df, googleshop_df)
compare_brands("cat litter", googlesearch_df, llm_df, googleshop_df)
compare_brands("instant coffee", googlesearch_df, llm_df, googleshop_df)
compare_brands("baking ingredients", googlesearch_df, llm_df, googleshop_df)

# Updated 3.27 data
compare_brands("dog food", googlesearch_df, llm_df, googleshop_df)
compare_brands("cat food", googlesearch_df, llm_df, googleshop_df)
compare_brands("cat litter", googlesearch_df, llm_df, googleshop_df)
compare_brands("instant coffee", googlesearch_df, llm_df, googleshop_df)
compare_brands("baking ingredients", googlesearch_df, llm_df, googleshop_df)

"""### Trial"""

google_dog = googlesearch_df[googlesearch_df["Category"] == "cat food"]

google_brand_counts = (
    google_dog["Brand"].value_counts()
    .reset_index()
    .rename(columns={"index": "brand", "Brand": "brand"})
)
google_brand_counts
google_brands = google_brand_counts["brand"].tolist()
google_brands
# # Obtain top 10 brands
# google_top10_brands = google_brand_counts.head(10)["count"].tolist()
# google_top10_brands

llm_dog = llm_df[llm_df["Product Title"] == "cat food"]

# Take brands
llm_brands = (
    llm_dog["Brand"].tolist()
)
llm_brands

"""## Nestle products"""

# Add ranking info to llm_df
llm_df["LLM_Rank"] = llm_df.groupby("Product Title")["Product Title"].cumcount() + 1

# Apply cleaning to product titles
googlesearch_df["Product Title"] = googlesearch_df["Product Title"].map(clean_name)
llm_df["Product Title"] = llm_df["Product Title"].map(clean_name)

# Add isNestle to llm_df
nestle_keywords = ["nestl", "purina", "nescaf", "toll"]
llm_df["isNestle"] = llm_df["Brand"].str.lower().apply(lambda x: int(any(k in x for k in nestle_keywords)))

# google_df["isNestle"] = google_df["Brand"].str.lower().apply(lambda x: int(any(k in x for k in nestle_keywords)))

def standardize_clean_name(name):
    name = str(name).lower()
    if "fancy feast" in name:
        return "purina fancy feast"
    elif "friskies" in name:
        return "purina friskies"
    elif "purina one" in name:
        return "purina one"
    elif "pro plan" in name:
        return "purina pro plan"
    elif "purina" in name:
        return "purina"
    else:
        return name

llm_df["clean_name"] = llm_df["Title"].apply(standardize_clean_name)
google_df["clean_name"] = google_df["Product Title"].apply(standardize_clean_name)

google_nestle = google_df[google_df["isNestle"] == 1]

google_summary = (
    google_nestle.groupby("clean_name")
    .agg(
        google_avg_rank=("Result Rank", "mean"),
        website_count=("Source Link", "nunique")
    )
    .reset_index()
)

llm_nestle = llm_df[llm_df["isNestle"] == 1][["clean_name", "LLM_Rank"]]

comparison = pd.merge(google_summary, llm_nestle, on="clean_name", how="outer")
comparison

google_df.head()