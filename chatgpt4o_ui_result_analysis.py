# -*- coding: utf-8 -*-
"""ChatGPT4o UI Result Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FfioOFf4yzksSWT-1ze4ZdWghmwkYxIL
"""

ChatGPT4o_1 = pd.read_csv("ChatGPT4o and Copilot Data - Instant Coffee - ChatGPT4o - Boyuan.csv")
ChatGPT4o_2 = pd.read_csv("ChatGPT4o and Copilot Data - Instant Coffee - ChatGPT4o - Jiamei.csv")
ChatGPT4o_3 = pd.read_csv("ChatGPT4o and Copilot Data - Instant Coffee - ChatGPT4o - Wensha.csv")

ChatGPT4o_1['Ranking'] = ChatGPT4o_1.groupby('Run').cumcount() + 1
ChatGPT4o_2['Ranking'] = ChatGPT4o_2.groupby('Run').cumcount() + 1
ChatGPT4o_3['Ranking'] = ChatGPT4o_3.groupby('Run').cumcount() + 1

ChatGPT4o = pd.concat([ChatGPT4o_1, ChatGPT4o_2, ChatGPT4o_3])
ChatGPT4o = ChatGPT4o.drop(['Unnamed: 12', 'Unnamed: 13', 'Unnamed: 14', 'Unnamed: 15', 'Unnamed: 16'], axis=1)

url_columns = [f'URL{i}' for i in range(1, 11)]

ChatGPT4o['URL_count'] = ChatGPT4o[url_columns].notna().sum(axis=1)
ChatGPT4o['id'] = range(1, len(ChatGPT4o) + 1)

ChatGPT4o

"""## URL_count versus Ranking"""

ChatGPT4o_noURLs = ChatGPT4o.drop(columns=url_columns)
ChatGPT4o_noURLs

ChatGPT4o_noURLs[['Ranking', 'URL_count']].describe()

# Standardize Ranking Across Runs：
# eg. The Rank_norm of the 1st product among 5 products is 20%, and among 10 products is 10%.
ChatGPT4o_noURLs['Rank_norm'] = ChatGPT4o_noURLs.groupby('Run')['Ranking'].transform(
    lambda x: x / x.max()
)

"""Since each Run (prompt response) may contain a different number of products—typically 5, but sometimes 10 or more—raw ranking values are not directly comparable across runs. For instance, a product ranked 3rd out of 5 is relatively higher than one ranked 3rd out of 10, even though both have the same absolute value. To address this, we compute a standardized ranking (Rank_norm) by dividing each product's position by the total number of items in its run. This normalization enables fair comparison across runs and allows us to analyze trends in product positioning without bias from run length."""

import seaborn as sns
sns.boxplot(x='Rank_norm', y='URL_count', data=ChatGPT4o_noURLs)

import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

plt.figure(figsize=(12, 6))
ax = sns.boxplot(x='Rank_norm', y='URL_count', data=ChatGPT4o_noURLs)

xticks = ax.get_xticks()
xticklabels = ax.get_xticklabels()

skip = 10
ax.set_xticks(xticks[::skip])
ax.set_xticklabels([label.get_text() for label in xticklabels[::skip]], rotation=45)

plt.title('URL Count across Rank_norm')
plt.xlabel('Normalized Ranking')
plt.ylabel('URL Count')
plt.tight_layout()
plt.show()

"""This boxplot shows the distribution of URL_count across different normalized ranking values (Rank_norm). We observe a clear pattern: products with higher rankings (i.e., lower Rank_norm values) tend to have more URLs on average. As the normalized rank increases, the median and spread of URL_count generally decrease, suggesting that products ranked lower tend to be cited less frequently across sources. This indicates a potential correlation between recommendation strength and the number of supporting URLs."""

ChatGPT4o_noURLs['Rank_bin'] = pd.qcut(ChatGPT4o_noURLs['Rank_norm'], q=5)
ChatGPT4o_noURLs.groupby('Rank_bin')['URL_count'].mean()

"""This table groups standardized rankings into five quantile-based bins and calculates the average URL_count within each bin. The results reveal a decreasing trend: products in the top bin (i.e., best-ranked) have the highest average number of URLs, while those in the lowest-ranked bin have the fewest. This supports the idea that product visibility or recommendation strength is associated with more source references."""

ChatGPT4o_noURLs[['Rank_norm', 'URL_count']].corr()

"""The correlation matrix shows a weak but consistent negative correlation (-0.125) between Rank_norm and URL_count. While the relationship is not strong linearly, the direction aligns with earlier visual findings: as a product's rank worsens, the number of reference URLs tends to decline. This further reinforces the hypothesis that higher-ranked products tend to have broader citation coverage.

## URLs versus Ranking
"""

from urllib.parse import urlparse

# Extract simplified URL
def simplify_url(url):
    if pd.isna(url):
        return None
    parsed = urlparse(url)
    return f"{parsed.scheme}://{parsed.netloc}"

url_cols = [f'URL{i}' for i in range(1, 11)]
for col in url_cols:
    ChatGPT4o[col] = ChatGPT4o[col].apply(simplify_url)

# Add 'id' variable
ChatGPT4o['id'] = range(len(ChatGPT4o))

# Add 'id' variable
ChatGPT4o['id'] = range(len(ChatGPT4o))

url_long = ChatGPT4o.melt(
    id_vars=['id', 'Ranking'], value_vars=url_cols,
    var_name='URL_slot', value_name='Domain'
).dropna(subset=['Domain'])

domain_rank_counts = url_long.groupby(['Domain', 'Ranking']).size().unstack(fill_value=0)

domain_rank_counts

import seaborn as sns
import matplotlib.pyplot as plt

top_domains = url_long['Domain'].value_counts().head(5).index

# Heat map
domain_rank_matrix = url_long[url_long['Domain'].isin(top_domains)].groupby(['Domain', 'Ranking']).size().unstack(fill_value=0)

domain_rank_pct = domain_rank_matrix.div(domain_rank_matrix.sum(axis=1), axis=0) * 100
annot_labels = domain_rank_pct.applymap(lambda x: f"{x:.1f}%" if x > 0 else "")

plt.figure(figsize=(12, 6))
sns.heatmap(domain_rank_pct, annot=annot_labels, fmt="", cmap="Blues", cbar_kws={'label': 'Percentage (%)'})
plt.title("Domain Appearance Percentage by Ranking (Row-normalized)")
plt.xlabel("Ranking")
plt.ylabel("Domain")
plt.show()

"""Analysis of the product recommendation outputs from the ChatGPT-4o UI with web search functionality reveals a strong correlation between certain source domains and higher product rankings. Both the heatmap and line chart clearly show that a small number of websites—particularly https://www.allrecipes.com and *https://cornercoffeestore.com*—are disproportionately cited in top-ranked products. These domains appear most frequently in the #1 and #2 ranking positions, with their influence sharply declining in lower ranks. In contrast, other sites such as https://www.bestproductscanada.com and https://www.dropmocha.ca are more evenly distributed across rankings, indicating a weaker or more supplemental role in shaping recommendations.

Together, the visualizations suggest that the ChatGPT-4o UI relies heavily on a small set of high-authority websites when forming its top-tier product recommendations, highlighting a potential bias or weighting toward the first few reference sources retrieved via web search.

## Comparison with traditional search engine
"""

queries = {
    "Instant Coffee": "Top recommended Instant Coffee in Canada"
    # "Cat Food": "best cat food",
    # "Dog Food": "best dog food",
    # "Baking Ingredients": "best baking ingredients",
    # "Cat Litter": "best cat litter"
}

save_multiple_queries_to_csv(queries_by_category=queries, engine="google", num_results=20, output_filename="serpapi_google_4_30.csv")
save_multiple_queries_to_csv(queries_by_category=queries, engine="bing", num_results=20, output_filename="serpapi_bing_4_30.csv")
serpapi_bing = pd.read_csv("serpapi_bing_4_30.csv")
serpapi_google = pd.read_csv("serpapi_google_4_30.csv")

def get_match_stats(df, source_col, rank_col, domain_list):
    result = []
    for domain in domain_list:
        mask = df[source_col].str.contains(domain, na=False)
        matched_rows = df[mask]
        count = len(matched_rows)
        rank = matched_rows[rank_col].min() if count > 0 else None
        result.append((count, rank))
    return result

top_domains = [
    'https://www.allrecipes.com',
    'https://cornercoffeestore.com',
    'https://www.seriouseats.com',
    'https://www.bestproductscanada.com',
    'https://www.dropmocha.ca'
]

bing_stats = get_match_stats(serpapi_bing, 'Source', 'Source Rank', top_domains)
google_stats = get_match_stats(serpapi_google, 'Source', 'Source Rank', top_domains)

summary = pd.DataFrame({
    'Domain': top_domains,
    'Matched in Bing': [b[0] for b in bing_stats],
    'Source Rank in Bing': [b[1] for b in bing_stats],
    'Matched in Google': [g[0] for g in google_stats],
    'Source Rank in Google': [g[1] for g in google_stats]
})

summary

"""This table compares the top 5 domains most frequently cited in ChatGPT-4o’s product recommendations with their appearances and ranks in traditional search engine results from Bing and Google.

All 5 domains used by ChatGPT-4o also appear in Bing search results, with 4 out of 5 ranked in the top 6 positions.

https://cornercoffeestore.com is ranked #1 in Bing and is consistently reflected in ChatGPT-4o’s top product recommendations—strongly indicating that Bing’s first result heavily influences ChatGPT-4o output.

https://www.allrecipes.com and https://www.seriouseats.com, both prominent in ChatGPT-4o, also appear within Bing’s top 5 ranks, further supporting a tight alignment.

Although all domains also appear in Google, their ranks are generally lower and more dispersed, suggesting weaker correlation between Google rankings and ChatGPT-4o outputs.

The updated comparison shows a high correlation between Bing’s top-ranked sources and ChatGPT-4o’s product recommendation logic, reinforcing the assumption that ChatGPT-4o UI is strongly influenced by Bing Search rankings, especially the first few results.
"""